// Generated by CoffeeScript 1.8.0
(function() {
  var GoogleStrategy, MongoStore, express, flash, models, passport, path;

  express = require('express');

  flash = require('connect-flash');

  path = require('path');

  MongoStore = require('connect-mongo')(express);

  passport = require('passport');

  GoogleStrategy = require('passport-google').Strategy;

  models = require('../models');

  passport.serializeUser(function(user, done) {
    return done(null, user.id);
  });

  passport.deserializeUser(function(id, done) {
    return models.User.findById(id, done);
  });

  exports.configure = function(app, skin) {
    var hostname;
    app.set('port', process.env.PORT || 3000);
    hostname = 'localhost:' + app.get('port');
    app.enable('verbose errors');
    if ('production' === app.settings.env) {
      app.disable('verbose errors');
      hostname = 'stash.openmile.com';
    }
    app.use(express.responseTime());
    app.use(express.favicon(path.join(skin, 'public/img/favicon.ico')));
    app.use(express.logger('dev'));
    app.use(express.cookieParser('echo echo echo can you hear me?'));
    app.use(express.session({
      secret: 'keyboard cat',
      cookie: {
        maxAge: 600000
      },
      store: new MongoStore({
        db: 'stash'
      })
    }));
    app.use(passport.initialize());
    app.use(passport.session());
    passport.use(new GoogleStrategy({
      returnURL: "http://" + hostname + "/auth/callback/",
      realm: "http://" + hostname + "/"
    }, function(identifier, profile, done) {
      return models.User.findOneAndUpdate({
        open_id: identifier
      }, {
        open_id: identifier,
        first_name: profile.name.givenName,
        last_name: profile.name.familyName,
        email: profile.emails[0].value
      }, {
        upsert: true
      }, done);
    }));
    app.use(express.bodyParser());
    app.use(express.methodOverride());
    app.use(flash());
    app.use(function(req, res, next) {
      res.locals.flash = function() {
        return req.flash() || {};
      };
      res.locals.helpers = require('./helpers');
      res.locals.user = req.user;
      req.coords = null;
      if (req.cookies.coords) {
        try {
          req.coords = JSON.parse(req.cookies.coords);
        } catch (_error) {
          pass;
        }
      }
      return next();
    });
    app.use(function(req, res, next) {
      var shadow;
      shadow = {
        json: res.json,
        redirect: res.redirect
      };
      res.json = function(content) {
        var body, flashes, _ref;
        flashes = req.flash() || [];
        body = {
          content: content,
          flash: flashes,
          hasError: !!((_ref = flashes.error) != null ? _ref.length : void 0)
        };
        return shadow.json.apply(res, [body]);
      };
      res.redirect = function(url) {
        var body, flashes;
        if (req.xhr) {
          flashes = req.flash() || [];
          body = {
            content: null,
            flash: flashes,
            redirect: url
          };
          return shadow.json.apply(res, [body]);
        } else {
          return shadow.redirect.apply(res, [url]);
        }
      };
      return next();
    });
    app.use('/static', require('less-middleware')({
      src: path.join(skin, 'public'),
      dest: path.join(skin, 'compiled')
    }));
    app.use('/static', require('connect-coffee-script')({
      src: path.join(skin, 'public'),
      dest: path.join(skin, 'compiled')
    }));
    app.use('/static', express["static"](path.join(skin, 'public')));
    app.use('/static', express["static"](path.join(skin, 'bower_components')));
    app.use('/static', express["static"](path.join(skin, 'compiled')));
    app.use('/slow', express.timeout(1));
    app.use(app.router);
    app.use(function(req, res, next) {
      res.status(404);
      if (req.accepts('html')) {
        res.render('error/404.html', {
          url: req.url
        });
        return;
      }
      if (req.accepts('json')) {
        res.send({
          error: 'Not found'
        });
        return;
      }
      return res.type('txt').send('Not found');
    });
    return app.use(function(err, req, res, next) {
      res.status(err.status || 500);
      return res.render('error/500.html', {
        error: err
      });
    });
  };

}).call(this);
